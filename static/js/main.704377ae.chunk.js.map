{"version":3,"sources":["Context/MovieContext.js","components/GlobalComponents/Container.js","components/Hero/HeroNav/HeroNavLogo.js","components/Hero/HeroNav/HeroNavLink.js","components/Hero/HeroNav/HeroNavMenu.js","components/Hero/HeroNav/HeroNavSearch.js","components/Hero/HeroNav/HeroNav.js","components/GlobalComponents/Loader.js","components/Movies/Movies.js","components/Movies/MoviesPagination.js","components/Popular/Popular.js","components/Output/Output.js","components/Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["MovieContext","createContext","MovieState","children","useState","hiddenMenu","setHiddenMenu","activeLink","setActiveLink","showPagination","setShowPagination","isLoading","setIsLoading","movies","setMovies","search","setSearch","currentPage","setCurrentPage","popularMovies","setPopularMovies","API_KEY","getMovies","a","fetch","response","json","data","trim","handleSearch","e","preventDefault","searchResponse","searchData","getPopularMovies","popularMoviesResponse","popularMoviesData","useEffect","loadingTimeout","setTimeout","clearTimeout","Provider","value","newPage","direction","styles","css","Container","className","HeroNavLogo","HeroNavLink","btnText","useContext","style","color","onClick","HeroNavMenu","HeroNavSearch","onSubmit","type","placeholder","onChange","target","HeroNav","id","Loader","Movies","results","length","map","movieItem","index","key","src","poster_path","alt","MoviesPagination","Fragment","cursor","background","PopularMovies","popularMovieItem","Output","Popular","Hero","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.704377ae.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieState = ({ children }) => {\r\n\r\n  const [hiddenMenu, setHiddenMenu] = useState(true);\r\n\r\n  const [activeLink, setActiveLink] = useState(\"Popular\");\r\n\r\n  const [showPagination, setShowPagination] = useState(true);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n \r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [popularMovies, setPopularMovies] = useState([]);\r\n\r\n  const API_KEY = \"e4894372a585dcb1bc50d22902a745f5\";\r\n\r\n  const getMovies = async () => {\r\n    const response = await fetch(\r\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${currentPage}`\r\n    );\r\n    const data = await response.json();\r\n    if (search.trim() === \"\") {\r\n      setMovies(data);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    if (search.trim() === \"\") {\r\n      return;\r\n    }\r\n    const searchResponse = await fetch(\r\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${search}&page=${currentPage}`\r\n    );\r\n    const searchData = await searchResponse.json();\r\n    setMovies(searchData);\r\n    setShowPagination(false);\r\n  };\r\n\r\n  const newPage = (direction) => {\r\n    if (direction === \"next\") {\r\n      setCurrentPage(currentPage + 1);\r\n      setIsLoading(true);\r\n    } else if (direction === \"previous\" && currentPage !== 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const getPopularMovies = async () => {\r\n    const popularMoviesResponse = await fetch(\r\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=3`\r\n    );\r\n    const popularMoviesData = await popularMoviesResponse.json();\r\n    setPopularMovies(popularMoviesData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPopularMovies();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (search.trim() === \"\") {\r\n      setShowPagination(true);\r\n    }\r\n    getMovies();\r\n  }, [search, currentPage]);\r\n\r\n  useEffect(() => {\r\n    const loadingTimeout = setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 1300);\r\n    return () => clearTimeout(loadingTimeout);\r\n  }, [movies, currentPage]);\r\n\r\n  return (\r\n    <MovieContext.Provider\r\n      value={{\r\n        movies,\r\n        setMovies,\r\n        search,\r\n        setSearch,\r\n        activeLink,\r\n        setActiveLink,\r\n        handleSearch,\r\n        currentPage,\r\n        setCurrentPage,\r\n        newPage,\r\n        showPagination,\r\n        setShowPagination,\r\n        isLoading,\r\n        setIsLoading,\r\n        popularMovies,\r\n        setPopularMovies,\r\n        hiddenMenu,\r\n        setHiddenMenu,\r\n      }}\r\n    >\r\n      {children}\r\n    </MovieContext.Provider>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nconst Container = ({ children }) => (\r\n  <div css={styles} className=\"container\">\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  max-width: 1300px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default Container;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nconst HeroNavLogo = () => <h2 css={styles}>MovieApp</h2>;\r\n\r\nconst styles = css`\r\n  font-size: 22px;\r\n  color: #cb6ad2;\r\n  font-weight: 900;\r\n  user-select: none;\r\n`;\r\n\r\nexport default HeroNavLogo;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useContext } from \"react\";\r\nimport { MovieContext } from \"../../../Context/MovieContext\";\r\n\r\nconst HeroNavLink = ({ btnText }) => {\r\n  const { activeLink, setActiveLink, setHiddenMenu } = useContext(MovieContext);\r\n\r\n  return (\r\n    <button\r\n      style={{ color: activeLink === btnText ? \"#f9a5ff\" : \"#fff\" }}\r\n      css={styles}\r\n      onClick={() => {\r\n        setActiveLink(btnText);\r\n        setHiddenMenu(true);\r\n      }}\r\n    >\r\n      {btnText}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  border: none;\r\n  outline: none;\r\n  background: transparent;\r\n  font-size: 22px;\r\n  margin-right: 24px;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  @media (max-width: 860px) {\r\n    font-size: 40px;\r\n  }\r\n`;\r\n\r\nexport default HeroNavLink;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useContext } from \"react\";\r\nimport { MovieContext } from \"../../../Context/MovieContext\";\r\nimport HeroNavLink from \"./HeroNavLink\";\r\n\r\nconst HeroNavMenu = () => {\r\n  const { hiddenMenu } = useContext(MovieContext);\r\n\r\n  return (\r\n    <div css={styles} className={(hiddenMenu ? \"hidden\" : \"\") + \" heroNavMenu\"}>\r\n      <HeroNavLink btnText=\"Popular\" />\r\n      <HeroNavLink btnText=\"All Movies\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  padding-left: 80px;\r\n  @media (max-width: 860px) {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    opacity: 1;\r\n    min-height: 100vh;\r\n    background: rgba(0, 0, 0, 0.8);\r\n    padding-left: 0;\r\n    padding: 20px 50px;\r\n    width: 100%;\r\n    max-width: 340px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    transition: all 800ms ease-in-out;\r\n    &.hidden {\r\n      left: -600px;\r\n      opacity: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default HeroNavMenu;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useContext } from \"react\";\r\nimport { MovieContext } from \"../../../Context/MovieContext\";\r\n\r\nconst HeroNavSearch = () => {\r\n  const { search, setSearch, handleSearch, activeLink } = useContext(\r\n    MovieContext\r\n  );\r\n\r\n  return (\r\n    <form css={styles} onSubmit={handleSearch}>\r\n      {activeLink !== \"Popular\" && (\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for movies...\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  height: 40px;\r\n  min-height: 40px;\r\n  input {\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 50px;\r\n    border: 1px solid #2c2f39;\r\n    background: transparent;\r\n    padding: 10px 16px;\r\n    width: 260px;\r\n    color: #f9a5ff;\r\n    &::placeholder {\r\n      color: #f9a5ff;\r\n      letter-spacing: 1px;\r\n    }\r\n  }\r\n  @media (max-width: 860px) {\r\n    input {\r\n      width: 220px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default HeroNavSearch;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useContext } from \"react\";\r\nimport { MovieContext } from \"../../../Context/MovieContext\";\r\nimport Container from \"../../GlobalComponents/Container\";\r\nimport HeroNavLogo from \"./HeroNavLogo\";\r\nimport HeroNavMenu from \"./HeroNavMenu\";\r\nimport HeroNavSearch from \"./HeroNavSearch\";\r\n\r\nconst HeroNav = () => {\r\n  const { hiddenMenu, setHiddenMenu } = useContext(MovieContext);\r\n\r\n  return (\r\n    <nav css={styles}>\r\n      <Container>\r\n        <div className=\"wrapper\">\r\n          <HeroNavLogo />\r\n          <HeroNavMenu />\r\n        </div>\r\n        <HeroNavSearch />\r\n        <i\r\n          onClick={() => setHiddenMenu(!hiddenMenu)}\r\n          id=\"burgerMenu\"\r\n          className={hiddenMenu ? \"fas fa-bars\" : \"fas fa-times\"}\r\n        ></i>\r\n      </Container>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  min-height: 80px;\r\n  padding: 20px 0;\r\n  background: #212229;\r\n  .container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    .wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n    #burgerMenu {\r\n      color: #f9a5ff;\r\n      cursor: pointer;\r\n      display: none;\r\n    }\r\n  }\r\n  @media (max-width: 860px) {\r\n    .container {\r\n      #burgerMenu {\r\n        display: block;\r\n      }\r\n    }\r\n  }\r\n  @media (max-width: 1365px) {\r\n    .container {\r\n      max-width: 90%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default HeroNav;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nconst Loader = () => <div css={styles} className=\"loader\"></div>;\r\n\r\nconst styles = css`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 50px;\r\n  height: 10px;\r\n  background: #3498db;\r\n  border-radius: 5px;\r\n  animation: spinner 1.8s ease-in-out infinite;\r\n  &:before,\r\n  &:after {\r\n    position: absolute;\r\n    display: block;\r\n    content: \"\";\r\n    animation: spinner 1.8s ease-in-out infinite;\r\n    height: 10px;\r\n    border-radius: 5px;\r\n  }\r\n  &:before {\r\n    top: -20px;\r\n    left: 10px;\r\n    width: 40px;\r\n    background: #ef4836;\r\n  }\r\n  &:after {\r\n    bottom: -20px;\r\n    width: 35px;\r\n    background: #f5ab35;\r\n  }\r\n\r\n  @keyframes spinner {\r\n    0% {\r\n      transform: translateX(40px);\r\n    }\r\n\r\n    50% {\r\n      transform: translateX(-30px);\r\n    }\r\n    100% {\r\n      transform: translateX(40px);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Loader;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useContext } from \"react\";\r\nimport { MovieContext } from \"../../Context/MovieContext\";\r\nimport Container from \"../GlobalComponents/Container\";\r\nimport Loader from \"../GlobalComponents/Loader\";\r\n\r\nconst Movies = () => {\r\n  const { movies, isLoading } = useContext(MovieContext);\r\n\r\n  return (\r\n    <div css={styles} className=\"movies\">\r\n      <Container>\r\n        {movies.results && movies.results.length === 0 && (\r\n          <h1 className=\"error\">Result not found</h1>\r\n        )}\r\n        {!isLoading ? (\r\n          movies.results &&\r\n          movies.results.map((movieItem, index) => (\r\n            <img\r\n              key={index}\r\n              src={`https://image.tmdb.org/t/p/w400/${movieItem.poster_path}`}\r\n              alt=\"poster\"\r\n            />\r\n          ))\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  .container {\r\n    &:nth-child(1) {\r\n      height: 68vh;\r\n      overflow-y: scroll;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      flex-wrap: wrap;\r\n      &::-webkit-scrollbar {\r\n        width: 0;\r\n      }\r\n      .error {\r\n        font-size: 38px;\r\n        color: red;\r\n        height: 32px;\r\n      }\r\n    }\r\n    img {\r\n      width: 100%;\r\n      max-width: 240px;\r\n      height: 360px;\r\n      margin: 10px 0;\r\n    }\r\n  }\r\n  @media (max-width: 600px) {\r\n    .container {\r\n      img {\r\n        max-width: 100%;\r\n        height: 500px;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 601px) and (max-width: 854px) {\r\n    .container {\r\n      img {\r\n        max-width: 48%;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 855px) and (max-width: 1144px) {\r\n    .container {\r\n      img {\r\n        max-width: 31%;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 1145px) and (max-width: 1365px) {\r\n    .container {\r\n      img {\r\n        max-width: 23.4%;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Movies;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport React, { useContext } from \"react\";\r\nimport { MovieContext } from \"../../Context/MovieContext\";\r\nimport Container from \"../GlobalComponents/Container\";\r\n\r\nconst MoviesPagination = () => {\r\n  const { newPage, currentPage, showPagination } = useContext(MovieContext);\r\n\r\n  return (\r\n    <div css={styles} className=\"moviesPagination\">\r\n      {showPagination && (\r\n        <Container>\r\n          <React.Fragment>\r\n            <button\r\n              style={{\r\n                cursor: currentPage !== 1 ? \"pointer\" : \"not-allowed\",\r\n                background: currentPage !== 1 ? \"#32de57\" : \"#303847\",\r\n              }}\r\n              onClick={() => newPage(\"previous\")}\r\n            >\r\n              Prev Page\r\n            </button>\r\n            <button onClick={() => newPage(\"next\")}>Next Page</button>\r\n          </React.Fragment>\r\n        </Container>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  .container {\r\n    &:nth-child(1) {\r\n      height: 80px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      button {\r\n        border: none;\r\n        outline: none;\r\n        background: #32de57;\r\n        color: #fff;\r\n        font-size: 20px;\r\n        font-weight: 600;\r\n        border-radius: 4px;\r\n        width: 160px;\r\n        padding: 10px 0;\r\n        cursor: pointer;\r\n        user-select: none;\r\n        margin: 0 10px;\r\n        transition: background 500ms ease-in-out;\r\n        &:hover {\r\n          background: #259a3e;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default MoviesPagination;\r\n","/** @jsx jsx */\r\n/** fdfs fdsf*/\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useContext } from \"react\";\r\nimport { MovieContext } from \"../../Context/MovieContext\";\r\nimport Container from \"../GlobalComponents/Container\";\r\n\r\nconst PopularMovies = () => {\r\n  const { popularMovies } = useContext(MovieContext);\r\n\r\n  return (\r\n    <div css={styles} className=\"popularMovies\">\r\n      <Container>\r\n        {popularMovies.results &&\r\n          popularMovies.results.map((popularMovieItem, index) => (\r\n            <img\r\n              key={index}\r\n              src={`https://image.tmdb.org/t/p/w400/${popularMovieItem.poster_path}`}\r\n              alt=\"poster\"\r\n            />\r\n          ))}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  .container {\r\n    &:nth-child(1) {\r\n      height: 81vh;\r\n      overflow-y: scroll;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      flex-wrap: wrap;\r\n      &::-webkit-scrollbar {\r\n        width: 0;\r\n      }\r\n      .error {\r\n        font-size: 38px;\r\n        color: red;\r\n        height: 32px;\r\n      }\r\n    }\r\n    img {\r\n      width: 100%;\r\n      max-width: 240px;\r\n      height: 360px;\r\n      margin: 10px 0;\r\n    }\r\n  }\r\n  @media (max-width: 600px) {\r\n    .container {\r\n      img {\r\n        max-width: 100%;\r\n        height: 500px;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 601px) and (max-width: 854px) {\r\n    .container {\r\n      img {\r\n        max-width: 48%;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 855px) and (max-width: 1144px) {\r\n    .container {\r\n      img {\r\n        max-width: 31%;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 1145px) and (max-width: 1365px) {\r\n    .container {\r\n      img {\r\n        max-width: 23.4%;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PopularMovies;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport React, { useContext } from \"react\";\r\nimport { MovieContext } from \"../../Context/MovieContext\";\r\nimport Container from \"../GlobalComponents/Container\";\r\nimport Movies from \"../Movies/Movies\";\r\nimport MoviesPagination from \"../Movies/MoviesPagination\";\r\nimport Popular from \"../Popular/Popular\";\r\n\r\nconst Output = () => {\r\n  const { activeLink } = useContext(MovieContext);\r\n\r\n  return (\r\n    <div css={styles} className=\"output\">\r\n      {activeLink === \"All Movies\" && (\r\n        <Container>\r\n          <React.Fragment>\r\n            <Movies />\r\n            <MoviesPagination />\r\n          </React.Fragment>\r\n        </Container>\r\n      )}\r\n      {activeLink === \"Popular\" && (\r\n        <Container>\r\n          <Popular />\r\n        </Container>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  min-height: calc(100vh - 80px);\r\n  display: flex;\r\n  > .container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n  }\r\n  @media (max-width: 1365px) {\r\n    > .container {\r\n      max-width: 90%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Output;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport HeroNav from \"./HeroNav/HeroNav\";\r\nimport Output from \"../Output/Output\";\r\n\r\nconst Hero = () => {\r\n  return (\r\n    <section css={styles} className=\"hero\">\r\n      <HeroNav />\r\n      <Output />\r\n    </section>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  background: #1b1c22;\r\n`;\r\n\r\nexport default Hero;\r\n","import React from \"react\";\r\nimport { MovieState } from \"./Context/MovieContext\";\r\nimport Hero from \"./components/Hero/Hero\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <MovieState>\r\n      <Hero />\r\n    </MovieState>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}